openapi: 3.0.2
servers:
  - url: /benchesster.ben_kostka.de
info:
  description: |-
    This is a ChessGameManagement Server based on the OpenAPI 3.0 specification. 
    At the end of this project it should be possible for every chess player 
    to store and manage your chess scoresheet in your own account. Furthermore, 
    it should be possible to display every move on a chess board and to analyze the individual moves.

  version: 1.0.0-SNAPSHOT
  title: ChessGameManagement - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mail@ben-kostka.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: user
    description: Operations about user
paths:
  /home:
    get:
      summary: Returns the main structure of the homepage with sections
      operationId: getHome
      responses:
        '200':
          description: Successful response with the homepage sections
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /settings:
      get:
        summary: See options panel
        description: Returns all possible settings options
        operationId: getSettingsoptions
        responses:
          '200':
            description: successful operation
            content:
              text/*: # Text-based content of any type
                schema:
                  type: string
          '400':
            description: Invalid ID supplied
          '404':
            description: Account not found
  '/requests/{user_ID}':
      get:
        summary: Get all requested games
        description: Get all games that are requested to be played with partner
        operationId: getRequestedGames
        parameters:
          - name: user_ID
            in: path
            description: 'The name that needs to be fetched. Use user1 for testing. '
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/User'
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid username supplied
          '404':
            description: User not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: 'Creates list of users with given input array'
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: [ ]
      responses:
        default:
          description: successful operation
  '/user/{user_ID}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: user_ID
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: user_ID
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: user_ID
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '400':
          description: Invalid user id supplied
        '404':
          description: User not found
#  '/games/personal/{user_ID}':
#    operationId: getMyGameById
#    parameters:
#      - name: user_ID
#        in: path
#        description: ID of pet to return
#        required: true
#        schema:
#          type: integer
#          format: int64
#    responses:
#      '200':
#        description: successful operation
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Game'
#      '400':
#        description: Invalid ID supplied
#      '404':
#        description: Game not found
#  '/games/personal/{user_ID}/{game_ID}':
#    get:
#  '/club/{club_id}':
#    get:
#  '/club/{club_id}/team/{team_ID}':
#    get:
#  '/games/team/{team_id}':
#    get:
#  '/games/team/{team_id}/{game_ID}':
#    get:
#  '/games/group/{game_ID}/':
#    get:
#  '/games/group/{game_ID}/{game_ID}':
#    get:
#  '/games/unregistered-users':
#    get:
#  '/games/unregistered-users/{game_ID}':
#   get:
#  /games/upload:
#    get:
#  /games/upload/from-file:
#    post:
#  /games/upload/from-board:
#  post:
#  /games/upload/from-image:
#    post:


components:
  schemas:
    Game:
      properties:
        game_ID:
          type: integer
          format: int64
          example: 10
        event:
          type: string
          example: World Chess Championship
        site:
          type: string
          example: Germany
        date:
          type: string
          format: date # or date-time
          example: 25.11.2024
        round:
          type: string
          example: 6
        white:
          $ref: '#/components/schemas/User'
        black:
          $ref: '#/components/schemas/User'
        result:
          type: string
          example: 1-0
        moves:
          type: string
          example: 1. d4 d5 *
        comment:
          type: string
          example: {Okay Game}
        commentWhite:
          type: string
          example: { Good move }
        commentBlack:
          type: string
          example: { Bad move }
    Club:
      properties:
        club_ID:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: name
        president:
          $ref: '#/components/schemas/User'
    Team:
      properties:
        team_ID:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: name
        club:
          $ref: '#/components/schemas/Club'
        leader:
          $ref: '#/components/schemas/User'
    Request:
      properties:
        request_ID:
          type: integer
          format: int32
          example: 10
        sender:
          $ref: '#/components/schemas/User'
        recipient:
          $ref: '#/components/schemas/User'
        game:
          $ref: '#/components/schemas/Game'
        status:
          type: string
          example: done
    User:
      x-swagger-router-model: io.swagger.petstore.model.User
      properties:
        user_ID:
          type: integer
          format: int32
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
      xml:
        name: user
      type: object
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header