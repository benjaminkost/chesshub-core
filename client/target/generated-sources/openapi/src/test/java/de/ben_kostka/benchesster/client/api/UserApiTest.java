/*
 * ChessGameManagement - OpenAPI 3.0
 * This is a ChessGameManagement Server based on the OpenAPI 3.0 specification.  At the end of this project it should be possible for every chess player  to store and manage your chess scoresheet in your own account. Furthermore,  it should be possible to display every move on a chess board and to analyze the individual moves.
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: mail@ben-kostka.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.ben_kostka.benchesster.client.api;

import de.ben_kostka.benchesster.client.*;
import de.ben_kostka.benchesster.client.auth.*;
import org.joda.time.DateTime;
import de.ben_kostka.benchesster.client.model.User;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Create user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        //User user = null;
        //User response = api.createUser(user);
        // TODO: test validations
    }

    /**
     * Creates list of users with given input array
     *
     * Creates list of users with given input array
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsersWithListInputTest() throws ApiException {
        //List<User> user = null;
        //User response = api.createUsersWithListInput(user);
        // TODO: test validations
    }

    /**
     * Delete user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        //Integer userID = null;
        //api.deleteUser(userID);
        // TODO: test validations
    }

    /**
     * Get user by user name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByNameTest() throws ApiException {
        //Long userID = null;
        //User response = api.getUserByName(userID);
        // TODO: test validations
    }

    /**
     * Logs user into the system
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginUserTest() throws ApiException {
        //String username = null;
        //String password = null;
        //String response = api.loginUser(username, password);
        // TODO: test validations
    }

    /**
     * Logs out current logged in user session
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutUserTest() throws ApiException {
        //api.logoutUser();
        // TODO: test validations
    }

    /**
     * Update user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        //Integer userID = null;
        //User user = null;
        //api.updateUser(userID, user);
        // TODO: test validations
    }

}
